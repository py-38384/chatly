// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified Boolean?
  image String?
  provider String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessagesIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessagesIds], references: [id]) 

  friendIds String[] @db.ObjectId
  friends User[] @relation("Friend", fields: [friendIds], references: [id])
  friendOfIds String[] @db.ObjectId
  friendOfs User[] @relation("Friend", fields: [friendOfIds], references: [id])

  friendRequestIds String[] @db.ObjectId
  friendRequests User[] @relation("FriendRequest", fields: [friendRequestIds], references: [id])
  friendRequestFromIds String[] @db.ObjectId
  friendRequestFroms User[] @relation("FriendRequest", fields: [friendRequestFromIds], references: [id])

  blockedIds String[] @db.ObjectId
  blockeds User[] @relation("block", fields: [blockedIds], references: [id])
  blockedByIds String[] @db.ObjectId
  blockedBys User[] @relation("block", fields: [blockedByIds], references: [id])

  accounts Account[]
  message Message[]
}
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAT DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
